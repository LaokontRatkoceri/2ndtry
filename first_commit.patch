Subject: [PATCH] first commit
---
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/.gitignore	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,477 @@
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+##
+## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore
+
+# User-specific files
+*.rsuser
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# User-specific files (MonoDevelop/Xamarin Studio)
+*.userprefs
+
+# Mono auto generated files
+mono_crash.*
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+[Ww][Ii][Nn]32/
+[Aa][Rr][Mm]/
+[Aa][Rr][Mm]64/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+[Ll]ogs/
+
+# Visual Studio 2015/2017 cache/options directory
+.vs/
+# Uncomment if you have tasks that create the project's static files in wwwroot
+#wwwroot/
+
+# Visual Studio 2017 auto generated files
+Generated\ Files/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# NUnit
+*.VisualState.xml
+TestResult.xml
+nunit-*.xml
+
+# Build Results of an ATL Project
+[Dd]ebugPS/
+[Rr]eleasePS/
+dlldata.c
+
+# Benchmark Results
+BenchmarkDotNet.Artifacts/
+
+# .NET
+project.lock.json
+project.fragment.lock.json
+artifacts/
+
+# Tye
+.tye/
+
+# ASP.NET Scaffolding
+ScaffoldingReadMe.txt
+
+# StyleCop
+StyleCopReport.xml
+
+# Files built by Visual Studio
+*_i.c
+*_p.c
+*_h.h
+*.ilk
+*.meta
+*.obj
+*.iobj
+*.pch
+*.pdb
+*.ipdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*_wpftmp.csproj
+*.log
+*.tlog
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.svclog
+*.scc
+
+# Chutzpah Test files
+_Chutzpah*
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opendb
+*.opensdf
+*.sdf
+*.cachefile
+*.VC.db
+*.VC.VC.opendb
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+*.sap
+
+# Visual Studio Trace Files
+*.e2e
+
+# TFS 2012 Local Workspace
+$tf/
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# TeamCity is a build add-in
+_TeamCity*
+
+# DotCover is a Code Coverage Tool
+*.dotCover
+
+# AxoCover is a Code Coverage Tool
+.axoCover/*
+!.axoCover/settings.json
+
+# Coverlet is a free, cross platform Code Coverage Tool
+coverage*.json
+coverage*.xml
+coverage*.info
+
+# Visual Studio code coverage results
+*.coverage
+*.coveragexml
+
+# NCrunch
+_NCrunch_*
+.*crunch*.local.xml
+nCrunchTemp_*
+
+# MightyMoose
+*.mm.*
+AutoTest.Net/
+
+# Web workbench (sass)
+.sass-cache/
+
+# Installshield output folder
+[Ee]xpress/
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.[Pp]ublish.xml
+*.azurePubxml
+# Note: Comment the next line if you want to checkin your web deploy settings,
+# but database connection strings (with potential passwords) will be unencrypted
+*.pubxml
+*.publishproj
+
+# Microsoft Azure Web App publish settings. Comment the next line if you want to
+# checkin your Azure Web App publish settings, but sensitive information contained
+# in these scripts will be unencrypted
+PublishScripts/
+
+# NuGet Packages
+*.nupkg
+# NuGet Symbol Packages
+*.snupkg
+# The packages folder can be ignored because of Package Restore
+**/[Pp]ackages/*
+# except build/, which is used as an MSBuild target.
+!**/[Pp]ackages/build/
+# Uncomment if necessary however generally it will be regenerated when needed
+#!**/[Pp]ackages/repositories.config
+# NuGet v3's project.json files produces more ignorable files
+*.nuget.props
+*.nuget.targets
+
+# Microsoft Azure Build Output
+csx/
+*.build.csdef
+
+# Microsoft Azure Emulator
+ecf/
+rcf/
+
+# Windows Store app package directories and files
+AppPackages/
+BundleArtifacts/
+Package.StoreAssociation.xml
+_pkginfo.txt
+*.appx
+*.appxbundle
+*.appxupload
+
+# Visual Studio cache files
+# files ending in .cache can be ignored
+*.[Cc]ache
+# but keep track of directories ending in .cache
+!?*.[Cc]ache/
+
+# Others
+ClientBin/
+~$*
+*~
+*.dbmdl
+*.dbproj.schemaview
+*.jfm
+*.pfx
+*.publishsettings
+orleans.codegen.cs
+
+# Including strong name files can present a security risk
+# (https://github.com/github/gitignore/pull/2483#issue-259490424)
+#*.snk
+
+# Since there are multiple workflows, uncomment next line to ignore bower_components
+# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
+#bower_components/
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file
+# to a newer Visual Studio version. Backup files are not needed,
+# because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+ServiceFabricBackup/
+*.rptproj.bak
+
+# SQL Server files
+*.mdf
+*.ldf
+*.ndf
+
+# Business Intelligence projects
+*.rdl.data
+*.bim.layout
+*.bim_*.settings
+*.rptproj.rsuser
+*- [Bb]ackup.rdl
+*- [Bb]ackup ([0-9]).rdl
+*- [Bb]ackup ([0-9][0-9]).rdl
+
+# Microsoft Fakes
+FakesAssemblies/
+
+# GhostDoc plugin setting file
+*.GhostDoc.xml
+
+# Node.js Tools for Visual Studio
+.ntvs_analysis.dat
+node_modules/
+
+# Visual Studio 6 build log
+*.plg
+
+# Visual Studio 6 workspace options file
+*.opt
+
+# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
+*.vbw
+
+# Visual Studio 6 auto-generated project file (contains which files were open etc.)
+*.vbp
+
+# Visual Studio 6 workspace and project file (working project files containing files to include in project)
+*.dsw
+*.dsp
+
+# Visual Studio 6 technical files
+*.ncb
+*.aps
+
+# Visual Studio LightSwitch build output
+**/*.HTMLClient/GeneratedArtifacts
+**/*.DesktopClient/GeneratedArtifacts
+**/*.DesktopClient/ModelManifest.xml
+**/*.Server/GeneratedArtifacts
+**/*.Server/ModelManifest.xml
+_Pvt_Extensions
+
+# Paket dependency manager
+.paket/paket.exe
+paket-files/
+
+# FAKE - F# Make
+.fake/
+
+# CodeRush personal settings
+.cr/personal
+
+# Python Tools for Visual Studio (PTVS)
+__pycache__/
+*.pyc
+
+# Cake - Uncomment if you are using it
+# tools/**
+# !tools/packages.config
+
+# Tabs Studio
+*.tss
+
+# Telerik's JustMock configuration file
+*.jmconfig
+
+# BizTalk build output
+*.btp.cs
+*.btm.cs
+*.odx.cs
+*.xsd.cs
+
+# OpenCover UI analysis results
+OpenCover/
+
+# Azure Stream Analytics local run output
+ASALocalRun/
+
+# MSBuild Binary and Structured Log
+*.binlog
+
+# NVidia Nsight GPU debugger configuration file
+*.nvuser
+
+# MFractors (Xamarin productivity tool) working folder
+.mfractor/
+
+# Local History for Visual Studio
+.localhistory/
+
+# Visual Studio History (VSHistory) files
+.vshistory/
+
+# BeatPulse healthcheck temp database
+healthchecksdb
+
+# Backup folder for Package Reference Convert tool in Visual Studio 2017
+MigrationBackup/
+
+# Ionide (cross platform F# VS Code tools) working folder
+.ionide/
+
+# Fody - auto-generated XML schema
+FodyWeavers.xsd
+
+# VS Code files for those working on multiple tools
+.vscode/*
+!.vscode/settings.json
+!.vscode/tasks.json
+!.vscode/launch.json
+!.vscode/extensions.json
+*.code-workspace
+
+# Local History for Visual Studio Code
+.history/
+
+# Windows Installer files from build outputs
+*.cab
+*.msi
+*.msix
+*.msm
+*.msp
+
+# JetBrains Rider
+*.sln.iml
+
+##
+## Visual studio for Mac
+##
+
+
+# globs
+Makefile.in
+*.userprefs
+*.usertasks
+config.make
+config.status
+aclocal.m4
+install-sh
+autom4te.cache/
+*.tar.gz
+tarballs/
+test-results/
+
+# Mac bundle stuff
+*.dmg
+*.app
+
+# content below from: https://github.com/github/gitignore/blob/master/Global/macOS.gitignore
+# General
+.DS_Store
+.AppleDouble
+.LSOverride
+
+# Icon must end with two \r
+Icon
+
+
+# Thumbnails
+._*
+
+# Files that might appear in the root of a volume
+.DocumentRevisions-V100
+.fseventsd
+.Spotlight-V100
+.TemporaryItems
+.Trashes
+.VolumeIcon.icns
+.com.apple.timemachine.donotpresent
+
+# Directories potentially created on remote AFP share
+.AppleDB
+.AppleDesktop
+Network Trash Folder
+Temporary Items
+.apdisk
+
+# content below from: https://github.com/github/gitignore/blob/master/Global/Windows.gitignore
+# Windows thumbnail cache files
+Thumbs.db
+ehthumbs.db
+ehthumbs_vista.db
+
+# Dump file
+*.stackdump
+
+# Folder config file
+[Dd]esktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Windows Installer files
+*.cab
+*.msi
+*.msix
+*.msm
+*.msp
+
+# Windows shortcuts
+*.lnk
Index: API/API.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/API.csproj b/API/API.csproj
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/API.csproj	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,31 @@
+<Project Sdk="Microsoft.NET.Sdk.Web">
+
+  <PropertyGroup>
+    <TargetFramework>net7.0</TargetFramework>
+    <Nullable>disable</Nullable>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <UserSecretsId>90e97a6c-946c-4e10-8fea-10296d88e4f2</UserSecretsId>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="SQLite" Version="3.13.0" />
+    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\Application\Application.csproj" />
+  </ItemGroup>
+
+</Project>
Index: API/Controllers/ActivitiesController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Controllers/ActivitiesController.cs b/API/Controllers/ActivitiesController.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Controllers/ActivitiesController.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,28 @@
+using Domain;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+using Persistence;
+
+namespace API.Controllers
+{
+    public class ActivitiesController : Controller
+    {
+        private readonly DataContext _context;
+
+        public ActivitiesController(DataContext context)
+        {
+            _context = context;
+        }
+        [HttpGet]
+        public async Task<ActionResult<List<Activity>>> GetActivities()
+        {
+            return await _context.Activities.ToListAsync();
+        }
+
+        [HttpPost("{id}")]
+        public async Task<ActionResult<Activity>> getActivity(Guid id)
+        {
+            return await _context.Activities.FindAsync(id);
+        }
+    }
+}
Index: API/Controllers/BaseApiController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Controllers/BaseApiController.cs b/API/Controllers/BaseApiController.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Controllers/BaseApiController.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,11 @@
+using Microsoft.AspNetCore.Mvc;
+
+namespace API.Controllers
+{
+    [ApiController]
+    [Route("[controller]")]
+    public class BaseApiController : Controller
+    {
+        
+    }
+}
Index: API/Controllers/WeatherForecastController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Controllers/WeatherForecastController.cs b/API/Controllers/WeatherForecastController.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Controllers/WeatherForecastController.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,32 @@
+using Microsoft.AspNetCore.Mvc;
+
+namespace API.Controllers;
+
+[ApiController]
+[Route("[controller]")]
+public class WeatherForecastController : ControllerBase
+{
+    private static readonly string[] Summaries = new[]
+    {
+        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
+    };
+
+    private readonly ILogger<WeatherForecastController> _logger;
+
+    public WeatherForecastController(ILogger<WeatherForecastController> logger)
+    {
+        _logger = logger;
+    }
+
+    [HttpGet(Name = "GetWeatherForecast")]
+    public IEnumerable<WeatherForecast> Get()
+    {
+        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
+        {
+            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
+            TemperatureC = Random.Shared.Next(-20, 55),
+            Summary = Summaries[Random.Shared.Next(Summaries.Length)]
+        })
+        .ToArray();
+    }
+}
Index: API/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Program.cs b/API/Program.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Program.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,52 @@
+using Microsoft.AspNetCore.Hosting.Server;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.Extensions.Options;
+using Persistence;
+
+var builder = WebApplication.CreateBuilder(args);
+
+// Add services to the container.
+
+builder.Services.AddControllers();
+// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
+builder.Services.AddEndpointsApiExplorer();
+builder.Services.AddSwaggerGen();
+
+
+builder.Services.AddDbContext<DataContext>(opt =>
+{
+    opt.UseSqlite(builder.Configuration.GetConnectionString("ConnectionStrings"));
+});
+
+var app = builder.Build();
+
+// Configure the HTTP request pipeline.
+if (app.Environment.IsDevelopment())
+{
+    app.UseSwagger();
+    app.UseSwaggerUI();
+}
+
+
+
+app.UseHttpsRedirection();
+
+app.UseAuthorization();
+
+app.MapControllers();
+
+using var scope = app.Services.CreateScope();
+var services = scope.ServiceProvider;
+try
+{
+    var context = services.GetRequiredService<DataContext>();
+    await context.Database.MigrateAsync();
+    await Seed.SeedData(context);
+}
+catch (Exception ex)
+{
+    var logger = services.GetRequiredService<ILogger<Program>>();
+    logger.LogError(ex, "An error occured during migration");
+}
+
+app.Run();
Index: API/Properties/launchSettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Properties/launchSettings.json b/API/Properties/launchSettings.json
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Properties/launchSettings.json	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,22 @@
+{
+  "$schema": "https://json.schemastore.org/launchsettings.json",
+  "iisSettings": {
+    "windowsAuthentication": false,
+    "anonymousAuthentication": true,
+    "iisExpress": {
+      "applicationUrl": "http://localhost:14867",
+      "sslPort": 44368
+    }
+  },
+  "profiles": {
+    "http": {
+      "commandName": "Project",
+      "dotnetRunMessages": true,
+      "launchBrowser": false,
+      "applicationUrl": "http://localhost:5000",
+      "environmentVariables": {
+        "ASPNETCORE_ENVIRONMENT": "Development"
+      }
+    }
+  }
+}
Index: API/Properties/serviceDependencies.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Properties/serviceDependencies.json b/API/Properties/serviceDependencies.json
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Properties/serviceDependencies.json	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,7 @@
+{
+  "dependencies": {
+    "secrets1": {
+      "type": "secrets"
+    }
+  }
+}
\ No newline at end of file
Index: API/Properties/serviceDependencies.local.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/Properties/serviceDependencies.local.json b/API/Properties/serviceDependencies.local.json
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/Properties/serviceDependencies.local.json	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,13 @@
+{
+  "dependencies": {
+    "secrets1": {
+      "type": "secrets.user"
+    },
+    "sqlite1": {
+      "secretStore": "LocalSecretsFile",
+      "resourceId": null,
+      "type": "sqlite.local",
+      "connectionId": "ConnectionStrings:reactivities.db"
+    }
+  }
+}
\ No newline at end of file
Index: API/WeatherForecast.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/WeatherForecast.cs b/API/WeatherForecast.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/WeatherForecast.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,12 @@
+namespace API;
+
+public class WeatherForecast
+{
+    public DateOnly Date { get; set; }
+
+    public int TemperatureC { get; set; }
+
+    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
+
+    public string? Summary { get; set; }
+}
Index: API/appsettings.Development.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/appsettings.Development.json b/API/appsettings.Development.json
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/appsettings.Development.json	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,11 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft.AspNetCore": "Information"
+    }
+  },
+  "ConnectionStrings": {
+    "DefaultConnection": "Data Source=reactivities.db"
+  }
+}
Index: API/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/API/appsettings.json b/API/appsettings.json
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/API/appsettings.json	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,9 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft.AspNetCore": "Warning"
+    }
+  },
+  "AllowedHosts": "*"
+}
Index: Application/Application.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Application/Application.csproj b/Application/Application.csproj
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Application/Application.csproj	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,29 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="SQLite" Version="3.13.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\Domain\Domain.csproj" />
+    <ProjectReference Include="..\Persistence\Persistence.csproj" />
+  </ItemGroup>
+
+  <PropertyGroup>
+    <TargetFramework>net7.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>disable</Nullable>
+  </PropertyGroup>
+
+</Project>
Index: Domain/Activity.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/Activity.cs b/Domain/Activity.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Domain/Activity.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,19 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Domain
+{
+    public class Activity
+    {
+        public Guid Id { get; set; }
+        public string Title { get; set; }
+        public DateTime Date { get; set; }
+        public string Description { get; set; }
+        public string Category { get; set; }
+        public string City { get; set; }
+        public string Venue { get; set; }
+    }
+}
Index: Domain/Domain.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Domain/Domain.csproj b/Domain/Domain.csproj
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Domain/Domain.csproj	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,24 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net7.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>disable</Nullable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="SQLite" Version="3.13.0" />
+  </ItemGroup>
+
+</Project>
Index: Persistence/DataContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Persistence/DataContext.cs b/Persistence/DataContext.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Persistence/DataContext.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,23 @@
+using Domain;
+using Microsoft.EntityFrameworkCore;
+using System.Collections.Generic;
+
+namespace Persistence
+{
+    public class DataContext : DbContext
+    {
+        public DataContext() { }
+
+        public DataContext(DbContextOptions options) : base(options)
+        {
+        }
+
+      //  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
+        //{
+    //        // You don't actually ever need to call this
+  //      }
+
+        public DbSet<Activity> Activities { get; set; }
+    }
+
+}
\ No newline at end of file
Index: Persistence/Migrations/20230805121636_Initial.Designer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Persistence/Migrations/20230805121636_Initial.Designer.cs b/Persistence/Migrations/20230805121636_Initial.Designer.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Persistence/Migrations/20230805121636_Initial.Designer.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,54 @@
+// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Persistence;
+
+#nullable disable
+
+namespace Persistence.Migrations
+{
+    [DbContext(typeof(DataContext))]
+    [Migration("20230805121636_Initial")]
+    partial class Initial
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");
+
+            modelBuilder.Entity("Domain.Activity", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Category")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("City")
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Date")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Title")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Venue")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Activities");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
Index: Persistence/Migrations/20230805121636_Initial.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Persistence/Migrations/20230805121636_Initial.cs b/Persistence/Migrations/20230805121636_Initial.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Persistence/Migrations/20230805121636_Initial.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,39 @@
+using System;
+using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace Persistence.Migrations
+{
+    /// <inheritdoc />
+    public partial class Initial : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "Activities",
+                columns: table => new
+                {
+                    Id = table.Column<Guid>(type: "TEXT", nullable: false),
+                    Title = table.Column<string>(type: "TEXT", nullable: true),
+                    Date = table.Column<DateTime>(type: "TEXT", nullable: false),
+                    Description = table.Column<string>(type: "TEXT", nullable: true),
+                    Category = table.Column<string>(type: "TEXT", nullable: true),
+                    City = table.Column<string>(type: "TEXT", nullable: true),
+                    Venue = table.Column<string>(type: "TEXT", nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Activities", x => x.Id);
+                });
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "Activities");
+        }
+    }
+}
Index: Persistence/Migrations/DataContextModelSnapshot.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Persistence/Migrations/DataContextModelSnapshot.cs b/Persistence/Migrations/DataContextModelSnapshot.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Persistence/Migrations/DataContextModelSnapshot.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,51 @@
+// <auto-generated />
+using System;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Persistence;
+
+#nullable disable
+
+namespace Persistence.Migrations
+{
+    [DbContext(typeof(DataContext))]
+    partial class DataContextModelSnapshot : ModelSnapshot
+    {
+        protected override void BuildModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");
+
+            modelBuilder.Entity("Domain.Activity", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Category")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("City")
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Date")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Title")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Venue")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Activities");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
Index: Persistence/Persistence.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Persistence/Persistence.csproj b/Persistence/Persistence.csproj
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Persistence/Persistence.csproj	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,28 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.9" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.9">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="SQLite" Version="3.13.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\Domain\Domain.csproj" />
+  </ItemGroup>
+
+  <PropertyGroup>
+    <TargetFramework>net7.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>disable</Nullable>
+  </PropertyGroup>
+
+</Project>
Index: Persistence/Seed.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Persistence/Seed.cs b/Persistence/Seed.cs
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Persistence/Seed.cs	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,113 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using Domain;
+
+namespace Persistence
+{
+    public class Seed
+    {
+        public static async Task SeedData(DataContext context)
+        {
+            if (context.Activities.Any()) return;
+
+            var activities = new List<Activity>
+            {
+                new Activity
+                {
+                    Title = "Past Activity 1",
+                    Date = DateTime.UtcNow.AddMonths(-2),
+                    Description = "Activity 2 months ago",
+                    Category = "drinks",
+                    City = "London",
+                    Venue = "Pub",
+                },
+                new Activity
+                {
+                    Title = "Past Activity 2",
+                    Date = DateTime.UtcNow.AddMonths(-1),
+                    Description = "Activity 1 month ago",
+                    Category = "culture",
+                    City = "Paris",
+                    Venue = "Louvre",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 1",
+                    Date = DateTime.UtcNow.AddMonths(1),
+                    Description = "Activity 1 month in future",
+                    Category = "culture",
+                    City = "London",
+                    Venue = "Natural History Museum",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 2",
+                    Date = DateTime.UtcNow.AddMonths(2),
+                    Description = "Activity 2 months in future",
+                    Category = "music",
+                    City = "London",
+                    Venue = "O2 Arena",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 3",
+                    Date = DateTime.UtcNow.AddMonths(3),
+                    Description = "Activity 3 months in future",
+                    Category = "drinks",
+                    City = "London",
+                    Venue = "Another pub",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 4",
+                    Date = DateTime.UtcNow.AddMonths(4),
+                    Description = "Activity 4 months in future",
+                    Category = "drinks",
+                    City = "London",
+                    Venue = "Yet another pub",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 5",
+                    Date = DateTime.UtcNow.AddMonths(5),
+                    Description = "Activity 5 months in future",
+                    Category = "drinks",
+                    City = "London",
+                    Venue = "Just another pub",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 6",
+                    Date = DateTime.UtcNow.AddMonths(6),
+                    Description = "Activity 6 months in future",
+                    Category = "music",
+                    City = "London",
+                    Venue = "Roundhouse Camden",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 7",
+                    Date = DateTime.UtcNow.AddMonths(7),
+                    Description = "Activity 2 months ago",
+                    Category = "travel",
+                    City = "London",
+                    Venue = "Somewhere on the Thames",
+                },
+                new Activity
+                {
+                    Title = "Future Activity 8",
+                    Date = DateTime.UtcNow.AddMonths(8),
+                    Description = "Activity 8 months in future",
+                    Category = "film",
+                    City = "London",
+                    Venue = "Cinema",
+                }
+            };
+
+            await context.Activities.AddRangeAsync(activities);
+            await context.SaveChangesAsync();
+        }
+    }
+}
\ No newline at end of file
Index: Reactivities.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Reactivities.sln b/Reactivities.sln
new file mode 100644
--- /dev/null	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
+++ b/Reactivities.sln	(revision 46fa33ffdf81bb1a8d48533d9174fc9312333cd3)
@@ -0,0 +1,40 @@
+
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "API", "API\API.csproj", "{BAB78F93-97A9-4BE4-A49E-9BCB542FA10D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Application", "Application\Application.csproj", "{496CF236-D4A7-462F-9466-AEC3E8383C27}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Domain", "Domain\Domain.csproj", "{DCE4C649-2D83-4F4C-A6C0-CB761E4B831B}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Persistence", "Persistence\Persistence.csproj", "{B1D6FF3C-F5B1-4BD0-86D5-AAC63FD8BD36}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{BAB78F93-97A9-4BE4-A49E-9BCB542FA10D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{BAB78F93-97A9-4BE4-A49E-9BCB542FA10D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{BAB78F93-97A9-4BE4-A49E-9BCB542FA10D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{BAB78F93-97A9-4BE4-A49E-9BCB542FA10D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{496CF236-D4A7-462F-9466-AEC3E8383C27}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{496CF236-D4A7-462F-9466-AEC3E8383C27}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{496CF236-D4A7-462F-9466-AEC3E8383C27}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{496CF236-D4A7-462F-9466-AEC3E8383C27}.Release|Any CPU.Build.0 = Release|Any CPU
+		{DCE4C649-2D83-4F4C-A6C0-CB761E4B831B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{DCE4C649-2D83-4F4C-A6C0-CB761E4B831B}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{DCE4C649-2D83-4F4C-A6C0-CB761E4B831B}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{DCE4C649-2D83-4F4C-A6C0-CB761E4B831B}.Release|Any CPU.Build.0 = Release|Any CPU
+		{B1D6FF3C-F5B1-4BD0-86D5-AAC63FD8BD36}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{B1D6FF3C-F5B1-4BD0-86D5-AAC63FD8BD36}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{B1D6FF3C-F5B1-4BD0-86D5-AAC63FD8BD36}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{B1D6FF3C-F5B1-4BD0-86D5-AAC63FD8BD36}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal
